coverage:
  country: ca
  province: nt
  ISO3166:
    alpha2: CA-NT
    country: Canada
    subdivision: Northwest Territories
  website: http://www.geomatics.gov.nt.ca/datashare/
  update_frequency: unknown
license:
  url: http://www.geomatics.gov.nt.ca/Legal.aspx
  text:
language: en
data:
  filename: 2020/NT_ROADSEG.shp
  layer:
  driver: ESRI Shapefile
  crs: "EPSG:3857"
  spatial: True
  query: "FEATURECOD not in ('RTRLLIN', 'RFERLIN')"
conform:
  addrange:
    acqtech: Vector Data
    metacover:
    credate:
      fields: [DC_ENDDATE, CAPDATE, CAPYEAR]
      process_separately: False
      functions:
        - function: query_assign
          columns: [DC_ENDDATE, CAPDATE, CAPYEAR]
          lookup:
            ~dc_enddate.isna():
              value: dc_enddate
              type: column
            dc_enddate.isna() and ~capdate.isna():
              value: capdate
              type: column
            dc_enddate.isna() and capdate.isna() and capyear != 0:
              value: capyear
              type: column
            dc_enddate.isna() and capdate.isna() and capyear == 0:
              value: 2006
              type: string
          engine: python
        - function: regex_sub
          pattern: "-"
          repl: ""
        - function: query_assign
          columns: credate
          lookup:
            credate.astype('int') > 2006:
              value: credate
              type: column
            credate.astype('int') <= 2006:
              value: 2006
              type: string
          engine: python
    datasetnam: Northwest Territories
    accuracy: 1
    provider: Municipal
    revdate:
    specvers: 2.0
    l_altnanid:
    r_altnanid:
    l_digdirfg: l_digdirfg
    r_digdirfg: r_digdirfg
    l_hnumf: l_hnumf
    r_hnumf: r_hnumf
    l_hnumsuff: l_hnumsuff
    r_hnumsuff: r_hnumsuff
    l_hnumtypf: l_hnumtypf
    r_hnumtypf: r_hnumtypf
    l_hnumstr: l_hnumstr
    r_hnumstr: r_hnumstr
    l_hnuml: l_hnuml
    r_hnuml: r_hnuml
    l_hnumsufl: l_hnumsufl
    r_hnumsufl: r_hnumsufl
    l_hnumtypl: l_hnumtypl
    r_hnumtypl: r_hnumtypl
    nid: uuid
    l_offnanid: uuid
    r_offnanid: uuid
    l_rfsysind: Civic
    r_rfsysind: Civic
  roadseg:
    acqtech: &acqtech
      fields: ACQTECH
      functions:
        - function: map_values
          lookup:
            "None": "None"
            15cm GSD Aerial Photography: Aerial Photo
            2006 SPOT informed by registry documents: Orthoimage
            2006 SPOT, LUP map: Orthoimage
            2007 SPOT: Orthoimage
            Aerial Photography: Aerial Photo
            Air Photo: Aerial Photo
            Centre of Road Parcels: Vector Data
            Existing QC with high resolution imagery: Orthoimage
            Exsisting, QC with high resolution imagery: Orthoimage
            GPS: GPS
            GPS tract: GPS
            GPS tract from regional Lands officer: GPS
            GPS; Air photo alighnment: GPS
            GPS; Air photo alignment: GPS
            Orthoimage: Orthoimage
            Registry maps and documentation: Paper Map
            SPOT and registry maps: Orthoimage
            SPOT and registry maps and documentation: Orthoimage
            Screen digitization off 1.5 metre SPOT imagery: Orthoimage
    metacover:
    credate: &credate
      fields: [DC_ENDDATE, CAPDATE, CAPYEAR]
      process_separately: False
      functions:
        - function: query_assign
          columns: [DC_ENDDATE, CAPDATE, CAPYEAR]
          lookup:
            ~dc_enddate.isna():
              value: dc_enddate
              type: column
            dc_enddate.isna() and ~capdate.isna():
              value: capdate
              type: column
            dc_enddate.isna() and capdate.isna() and capyear != 0:
              value: capyear
              type: column
            dc_enddate.isna() and capdate.isna() and capyear == 0:
              value: Unknown
              type: string
          engine: python
        - function: regex_sub
          pattern: "-"
          repl: ""
    datasetnam: Northwest Territories
    accuracy: ACCURACY
    provider: &provider
      fields: DATAPROVID
      functions:
        - function: map_values
          lookup:
            "None": Unknown
            BHP Billiton; WLWBfrom NWTCG/CIMP: Provincial / Territorial
            CARD; WLWBfrom NWTCG/CIMP: Provincial / Territorial
            City of Yellowknife: Municipal
            De Beers Canada; MVLWBfrom NWTCG/CIMP: Provincial / Territorial
            Dehcho LUPfrom NWTCG/CIMP: Provincial / Territorial
            Federal: Federal
            Federal;Territorial Lands Adm. ROfrom NWTCG/CIMP: Federal
            Federal;Territorial Lands Adm.ROfrom NWTCG/CIMP: Federal
            Federalfrom NWTCG/CIMP: Federal
            GNWT/INF: Provincial / Territorial
            GNWT/LANDS/Lands Administration Division: Provincial / Territorial
            NWT Centre for Geomatics: Provincial / Territorial
            NWT Metis Nationfrom NWTCG/CIMP: Provincial / Territorial
            NWT Power Corp.; MVLWBfrom NWTCG/CIMP: Provincial / Territorial
            NWTCG screen digitized from each end point: Provincial / Territorial
            Privatefrom NWTCG/CIMP: Provincial / Territorial
            Sahtu Land Use Planning Board: Provincial / Territorial
            Teritorial DOTfrom NWTCG/CIMP: Provincial / Territorial
            Territorial Atlasfrom NWTCG/CIMP: Provincial / Territorial
            Territorial DOTfrom NWTCG/CIMP: Provincial / Territorial
            Territorial Regional Landsfrom NWTCG/CIMP: Provincial / Territorial
            Tli Cho Landtran; WLWBfrom NWTCG/CIMP: Provincial / Territorial
            Tyhee Development; MVLWBfrom NWTCG/CIMP: Provincial / Territorial
    revdate:
    specvers: 2.0
    l_adddirfg: l_digdirfg
    r_adddirfg: r_digdirfg
    adrangenid: uuid
    closing:
      fields: [ROADNAME, PHA_ROADNA, RTENAME2EN, RTENAME3EN]
      process_separately: False
      functions:
        - function: query_assign
          columns: [ROADNAME, PHA_ROADNA, RTENAME2EN, RTENAME3EN]
          lookup:
            ? roadname.str.contains('Winter Road|Wint Rd|Winter Detour Road|Ice Road', regex=True, case=False, na=False) or
              ((pha_roadna.str.contains('Winter Road|Wint Rd|Winter Detour Road|Ice Road', regex=True, case=False, na=False) or
              rtename2en.str.contains('Winter Road|Wint Rd|Winter Detour Road|Ice Road', regex=True, case=False, na=False) or
              rtename3en.str.contains('Winter Road|Wint Rd|Winter Detour Road|Ice Road', regex=True, case=False, na=False))
              and roadname.isna())
            : value: Summer
              type: string
          engine: python
    exitnbr:
    l_hnumf: l_hnumf
    r_hnumf: r_hnumf
    roadclass:
      fields: FEATURECOD
      functions:
        - function: map_values
          lookup:
            "None": Unknown
            RARTLIN: Arterial
            RBRGLIN: Unknown
            RFERLIN: Unknown
            RHPOLIN: Expressway / Highway
            RHWYLIN: Expressway / Highway
            RLANLIN: Alleyway / Lane
            RRESLIN: Resource / Recreation
            RRMPLIN: Ramp
            RSTRLIN: Local / Street
            RTRLLIN: Resource / Recreation
            RWINLIN: Winter
    l_hnuml: l_hnuml
    r_hnuml: r_hnuml
    nid: uuid
    nbrlanes:
    l_placenam: COMMUNITY
    r_placenam: COMMUNITY
    l_stname_c: ROADNAME
    r_stname_c: ROADNAME
    pavsurf:
      fields: SURFACE
      functions:
        - function: map_values
          lookup:
            Gravel: "None"
            Unpaved: "None"
    pavstatus:
      fields: SURFACE
      functions:
        - function: map_values
          lookup:
            Gravel: Unpaved
            Paved: Paved
            Unpaved: Unpaved
    roadjuris:
    roadsegid:
    rtename1en:
      fields: PHA_ROADNA
      functions:
        - function: regex_sub
          pattern: "\\b(No. [1-9][0-9]*)\\b"
          repl: ""
    rtename2en:
      fields: RTENAME2EN
      functions:
        - function: regex_sub
          pattern: "\\b(No. [1-9][0-9]*)\\b"
          repl: ""
        - function: regex_sub
          pattern: "PRIVATE"
          repl: "Unknown"
    rtename3en:
      fields: RTENAME3EN
      functions:
        - function: regex_sub
          pattern: "\\b(No. [1-9][0-9]*)\\b"
          repl: ""
    rtename4en:
    rtename1fr:
    rtename2fr:
    rtename3fr:
    rtename4fr:
    rtnumber1:
      fields: PHA_ROADNA
      functions:
        - function: regex_find
          pattern: "\\b([1-9][0-9]*)\\b"
          match_index: 0
          group_index: 0
    rtnumber2:
      fields: RTENAME2EN
      functions:
        - function: regex_find
          pattern: "\\b([1-9][0-9]*)\\b"
          match_index: 0
          group_index: 0
    rtnumber3:
      fields: RTENAME3EN
      functions:
        - function: regex_find
          pattern: "\\b([1-9][0-9]*)\\b"
          match_index: 0
          group_index: 0
    rtnumber4:
    rtnumber5:
    speed:
    strunameen:
      fields: [FEATURECOD, ROADNAME, PHA_ROADNA, RTENAME2EN, RTENAME3EN]
      process_separately: False
      functions:
        - function: query_assign
          columns: [featurecod, roadname, pha_roadna, rtename2en, rtename3en]
          lookup:
            featurecod=='RBRGLIN' and roadname.str.contains(r'(Bridge|Br)$', regex=True, case=False, na=False):
              value: roadname
              type: column
            featurecod=='RBRGLIN' and pha_roadna.str.contains(r'(Bridge|Br)$', regex=True, case=False, na=False):
              value: pha_roadna
              type: column
            featurecod=='RBRGLIN' and rtename2en.str.contains(r'(Bridge|Br)$', regex=True, case=False, na=False):
              value: rtename2en
              type: column
            featurecod=='RBRGLIN' and rtename3en.str.contains(r'(Bridge|Br)$', regex=True, case=False, na=False):
              value: rtename3en
              type: column
          engine: python
    strunamefr:
    structid:
    structtype:
      fields: FEATURECOD
      functions:
        - function: query_assign
          columns: featurecod
          lookup:
            featurecod=='RBRGLIN':
              value: Bridge
              type: string
          engine: python
    trafficdir:
    unpavsurf:
      fields: SURFACE
      functions:
        - function: map_values
          lookup:
            Gravel: Gravel
            Paved: "None"
  strplaname:
    acqtech: *acqtech
    metacover:
    credate: *credate
    datasetnam: Northwest Territories
    accuracy: ACCURACY
    provider: *provider
    revdate:
    specvers: 2.0
    dirprefix:
      fields: ROADNAME
      functions:
        - &roadname_regex_sub
          function: regex_sub
          pattern: "(?!^St.)(?!^St)(?<!')\\b(Ave|Blvd|Cr|Cres|Crt|Dr|Ln|Pk|Pl|Pt|Rd|St|E|N|NE|NW|S|SE|SW|W)(\\.|\\b)"
          repl:
            Ave.: Avenue
            Ave: Avenue
            Blvd.: Boulevard
            Blvd: Boulevard
            Cr.: Crescent
            Cr: Crescent
            Cres.: Crescent
            Cres: Crescent
            Crt.: Court
            Crt: Court
            Dr.: Drive
            Dr: Drive
            Ln.: Lane
            Ln: Lane
            Pk.: Park
            Pk: Park
            Pl.: Place
            Pl: Place
            Pt.: Point
            Pt: Point
            Rd.: Road
            Rd: Road
            St.: Street
            St: Street
            E.: East
            E: East
            N.: North
            N: North
            NE.: Northeast
            NE: Northeast
            NW.: Northwest
            NW: Northwest
            S.: South
            S: South
            SE.: Southeast
            SE: Southeast
            SW.: Southwest
            SW: Southwest
            W.: West
            W: West
        - function: regex_find
          pattern: "(?<!^)\\b(domain_strplaname_dirsuffix)\\b"
          match_index: -1
          group_index: 0
          strip_result: True
        - function: regex_find
          pattern: "\\b(domain_strplaname_dirprefix)\\b(?!$)"
          match_index: 0
          group_index: 0
    dirsuffix:
      fields: ROADNAME
      functions:
        - *roadname_regex_sub
        - function: regex_find
          pattern: "(?<!^)\\b(domain_strplaname_dirsuffix)\\b"
          match_index: -1
          group_index: 0
    muniquad:
    nid: uuid
    placename: COMMUNITY
    placetype:
      fields: COMMUNITY
      functions:
        - function: map_values
          lookup:
            Aklavik: HAM
            Behchokò̜: CG
            Colville Lake: SET
            Délįne: CC
            Enterprise: HAM
            Fort Good Hope: CC
            Fort McPherson: HAM
            Fort Providence: HAM
            Fort Resolution: HAM
            Fort Simpson: VL
            Fort Smith: T
            Gamètì: CG
            Gwich'in: Unknown
            Hay River: T
            Inuvialuit: Unknown
            Inuvik: T
            Kakisa: SET
            Ndilǫ: Unknown
            Norman Wells: T
            Northwest Territories: NO
            Northwest Territories, unorganized: NO
            Paulatuk: HAM
            Sachs Harbour: HAM
            Sahtu Dene and Metis: Unknown
            Tsiigehtchic: CC
            Tuktoyaktuk: HAM
            Tulita: HAM
            Ulukhaktok: HAM
            Wekweètì: CG
            Whatì: CG
            Yellowknife: CY
            Łutselk’e: SET
    province: Northwest Territories
    starticle:
      fields: ROADNAME
      functions:
        - *roadname_regex_sub
        - function: regex_find
          pattern: "\\b(domain_strplaname_starticle)\\b"
          match_index: 0
          group_index: 0
    namebody:
      fields: ROADNAME
      functions:
        - *roadname_regex_sub
        - function: regex_find
          pattern: "(?<!^)\\b(domain_strplaname_dirsuffix)\\b"
          match_index: -1
          group_index: 0
          strip_result: True
        - function: regex_find
          pattern: "\\b(domain_strplaname_dirprefix)\\b(?!$)"
          match_index: 0
          group_index: 0
          strip_result: True
        - function: regex_find
          pattern: "(?<!^)\\b(domain_strplaname_strtysuf)\\b"
          match_index: -1
          group_index: 0
          strip_result: True
        - function: regex_find
          pattern: "\\b(domain_strplaname_strtypre)\\b(?!$)"
          match_index: 0
          group_index: 0
          strip_result: True
        - function: regex_find
          pattern: "\\b(domain_strplaname_starticle)\\b"
          match_index: 0
          group_index: 0
          strip_result: True
    strtypre:
      fields: ROADNAME
      functions:
        - *roadname_regex_sub
        - function: regex_find
          pattern: "(?<!^)\\b(domain_strplaname_strtysuf)\\b"
          match_index: -1
          group_index: 0
          strip_result: True
        - function: regex_find
          pattern: "\\b(domain_strplaname_strtypre)\\b(?!$)"
          match_index: 0
          group_index: 0
    strtysuf:
      fields: ROADNAME
      functions:
        - *roadname_regex_sub
        - function: regex_find
          pattern: "(?<!^)\\b(domain_strplaname_strtysuf)\\b"
          match_index: -1
          group_index: 0
